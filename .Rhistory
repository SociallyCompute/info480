?plot
?abline
?plot
install.packages("statnet")
#!/usr/bin/env Rscript
#library(ggplot2)
{
?plot
}
setwd("~/GitHub/info480")
#!/usr/bin/env Rscript
## Look at the networksis package for this data...
## Quite a gap between methods used in journals and the methods that
## are available for use.  R plays a role
## TODO - GOOGLE VIS in R
rm(list=ls(all=TRUE))
library(network)
library(statnet)
########
## Other Libraries with Utility for network analysis
########
#library(tnet)
#library(igraph)
#library(lsa)
#library(RODBC)
#library(ggplot2)
#library(blockmodeling)
#igraph.par("print.vertex.attributes", TRUE)
#igraph.par("print.edge.attributes", TRUE)
graphSetArray <- c()
graphPrefixArray <- c()
inDegArray <- c()
outDegArray <- c()
betweennessArray <- c()
labelArray <- c()
nodeArray <- c()
####################################################################
# Read the Data in
####################################################################
gitLists <- system("dir project*edgelist.csv", intern=T)
for (i in 1:length(gitLists))
{
filename <- gitLists[i]
el <- read.csv(filename, header=TRUE, row.names=NULL)
disAll=network(el,matrix.type="edgelist")
centered <- centralization(disAll, degree, normalize)
ideg <- degree(disAll, cmode="indegree")
odeg <- degree(disAll, cmode="outdegree")
set.vertex.attribute(disAll, "indegree", degree(disAll, cmode="indegree"))
set.vertex.attribute(disAll, "outdegree", degree(disAll, cmode="outdegree"))
viz1=paste("output/",filename,"viz1",i,".png")
png(viz1)
plot(disAll, displayisolates = FALSE, vertex.col="blue", edge.len=(1/n$mel.dist))
dev.off()
viz2=paste("output/",filename,"viz2",i,".png")
png(viz2)
gplot(disAll,vertex.cex=(ideg+odeg)^0.5/2, vertex.sides=50, label.cex=0.8, vertex.col=rgb(odeg/max(odeg), 0, ideg/max(ideg)), label=network.vertex.names(disAll), displayisolates=FALSE,  boxed.labels=FALSE)
gplot(disAll,vertex.cex=(ideg+odeg)^0.2/2, vertex.sides=50, label.cex=0.8, 	vertex.col=rgb(odeg/max(odeg), 0, ideg/max(ideg)),  displayisolates=FALSE)
dev.off()
viz3=paste("output/",filename,"viz3",i,".png")
png(viz3)
hist(ideg, xlab="Indegree", main="Indegree Distribution", prob=TRUE)
hist(odeg, xlab="Outdegree", main="Outdegree Distribution", prob=TRUE)
hist(odeg+ideg, xlab="Total degree", main="Total degree Distribution", prob=TRUE)
plot(ideg, odeg, type="n", xlab="incoming", ylab="outgoing")
abline(0,1, lty=3)
text(jitter(ideg), jitter(odeg), network.vertex.names(disAll), cex=0.75, col=2)
dev.off()
viz4=paste("output/", filename, "nameline", i, ".png")
png(viz4)
plot(ideg, odeg, type="n", xlab="incoming", ylab="outgoing", main=centered)
abline(0,1, lty=3)
text(jitter(ideg), jitter(odeg), network.vertex.names(disAll), cex=2.0, col=1)
dev.off()
}
#
#  This code does not work right now; and its not needed.  Derived from another program used a while ago.
#
# 	V(disAll)$ideg<-degree(disAll, mode="in")
# 	V(disAll)$odeg<-degree(disAll, mode="out")
# 	V(disAll)$BTW<-signif(betweenness(disAll), digits=2)
# 	labelTwo=paste(V(disAll)$name, "\n", " IN=", V(disAll)$ideg, " OUT=", V(disAll)$odeg,"\n", "Betweenness=",V(disAll)$BTW)
# 	labelThree=paste(V(disAll)$name,",",V(disAll)$ideg,",", V(disAll)$odeg,",", V(disAll)$BTW,",")
# 	#V(disAll)$label <- V(disAll)$name
# 	V(disAll)$label <- labelTwo
# 	V(disAll)$nodeSummary <- labelThree
# 	#print(V(disAll)$label)
# 	labelArray <<- rbind(labelArray, paste(V(disAll)$nodeSummary, collapse=" "))
#
#
# 	modeg=max(V(disAll)$odeg)
# 	mideg=max(V(disAll)$ideg)
# 	E(disAll)$width <- E(disAll)$w
# 	E(disAll)$arrow.size <-0.99
# 	E(disAll)$edgeBetween <- edge.betweenness(disAll)
#E(disAll)$label <- paste("edge betweenness","\n", E(disAll)$edgeBetween)
# 	#layout.spring(disAll,weights=E(disAll)$weight+.01)
# 	V(disAll)$size <-20^((V(disAll)$ideg+V(disAll)$odeg)/(modeg+mideg))
# 	V(disAll)$color <- rgb(V(disAll)$odeg/modeg, 0, V(disAll)$ideg/mideg)
#
fix(betweennessArray)
setwd("/Volumes/Macintosh HD 2/Github/info480/week7")
x = seq( from = -2 , to = 2 , by = 0.1 )   # Specify vector of x values.
y = x^2                                    # Specify corresponding y values.
plot( x , y , type = "l" )                 # Make a graph of the x,y points.
HDIofMCMC = function( sampleVec , credMass=0.95 ) {
# Computes highest density interval from a sample of representative values,
#   estimated as shortest credible interval.
# Arguments:
#   sampleVec
#     is a vector of representative values from a probability distribution.
#   credMass
#     is a scalar between 0 and 1, indicating the mass within the credible
#     interval that is to be estimated.
# Value:
#   HDIlim is a vector containing the limits of the HDI
sortedPts = sort( sampleVec )
ciIdxInc = floor( credMass * length( sortedPts ) )
nCIs = length( sortedPts ) - ciIdxInc
ciWidth = rep( 0 , nCIs )
for ( i in 1:nCIs ) {
ciWidth[ i ] = sortedPts[ i + ciIdxInc ] - sortedPts[ i ]
}
HDImin = sortedPts[ which.min( ciWidth ) ]
HDImax = sortedPts[ which.min( ciWidth ) + ciIdxInc ]
HDIlim = c( HDImin , HDImax )
return( HDIlim )
}
# Specify known values of prior and actual data.
priorA = 100
priorB = 1
actualDataZ  = 8
actualDataN  = 12
# Compute posterior parameter values.
postA = priorA + actualDataZ
postB = priorB + actualDataN - actualDataZ
# Number of flips in a simulated sample should match the actual sample size:
simSampleSize = actualDataN
# Designate an arbitrarily large number of simulated samples.
nSimSamples = 10000
# Set aside a vector in which to store the simulation results.
simSampleZrecord = vector( length=nSimSamples )
# Now generate samples from the posterior.
for ( sampleIdx in 1:nSimSamples ) {
# Generate a theta value for the new sample from the posterior.
sampleTheta = rbeta( 1 , postA , postB )
# Generate a sample, using sampleTheta.
sampleData = sample( x=c(0,1) , prob=c( 1-sampleTheta , sampleTheta ) ,
size=simSampleSize , replace=TRUE )
# Store the number of heads in sampleData.
simSampleZrecord[ sampleIdx ] = sum( sampleData )
}
# Make a histogram of the number of heads in the samples.
hist( simSampleZrecord )
# Kruschke, J. K. (2011). Doing Bayesian data analysis: A
# Tutorial with R and BUGS. Academic Press / Elsevier.
datatset <-read.csv("europe.csv")
modelname<-hclust(dist(dataset))
dataset <-read.csv("europe.csv")
modelname<-hclust(dist(dataset))
plot(modelname, labels=dataset$variable)
plot(modelname)
rect.hclust(modelname, n)
rect.hclust(modelname, 3)
rect.hclust(modelname, 5)
plot(modelname)
rect.hclust(modelname, h=height)
height=3
rect.hclust(modelname, h=height)
dataset <-read.csv("europe.csv")
modelname<-hclust(dist(dataset))
plot(modelname, labels=dataset$variable)
plot(modelname)
rect.hclust(modelname, 5)
plot(modelname)
rect.hclust(modelname, h=height)
dataset <-read.csv("europe.csv")
modelname<-hclust(dist(dataset))
plot(modelname, labels=dataset$variable)
plot(modelname)
rect.hclust(modelname, 5)
plot(modelname)
rect.hclust(modelname, h=7)
rect.hclust(modelname, k=7)
plot(modelname)
dataset <-read.csv("europe.csv")
modelname<-hclust(dist(dataset))
plot(modelname, labels=dataset$variable)
plot(modelname)
rect.hclust(modelname, 5)
dataset <-read.csv("europe.csv")
modelname<-hclust(dist(dataset))
plot(modelname, labels=dataset$variable)
plot(modelname)
rect.hclust(modelname,9)
europe
dataset
europe <-read.csv("europe.csv")
euroclust<-hclust(dist(europe[-1]))
plot(euroclust, labels=europe$Country)
europe
library(gtools)
# Bayesian bootstrap
mean.bb <- function(x, n) {
apply(rdirichlet(n, rep(1, length(x))), 1, weighted.mean, x = x)
}
# standard bootstrap
mean.fb <- function(x, n) {
replicate(n, mean(sample(x, length(x), TRUE)))
}
set.seed(1)
reps <- 100000
x <- cars$dist
system.time(fbq <- quantile((mean.fb(x, reps)), c(0.025, 0.075)))
system.time(bbq <- quantile((mean.bb(x, reps)), c(0.025, 0.075)))
install.packages("gtools")
library(gtools)
# Bayesian bootstrap
mean.bb <- function(x, n) {
apply(rdirichlet(n, rep(1, length(x))), 1, weighted.mean, x = x)
}
# standard bootstrap
mean.fb <- function(x, n) {
replicate(n, mean(sample(x, length(x), TRUE)))
}
set.seed(1)
reps <- 100000
x <- cars$dist
system.time(fbq <- quantile((mean.fb(x, reps)), c(0.025, 0.075)))
system.time(bbq <- quantile((mean.bb(x, reps)), c(0.025, 0.075)))
bbq
x
x = seq( from = -2 , to = 2 , by = 0.1 )   # Specify vector of x values.
y = x^2                                    # Specify corresponding y values.
plot( x , y , type = "l" )                 # Make a graph of the x,y points.
dataset <-read.csv("europe.csv")
modelname<-hclust(dist(dataset))
plot(modelname, labels=dataset$variable)
plot(modelname)
rect.hclust(modelname,9)
plot(modelname)
rect.hclust(modelname, k=7)
dataset <-read.csv("europe.csv")
modelname<-hclust(dist(dataset))
plot(modelname, labels=dataset$variable)
plot(modelname)
rect.hclust(modelname,9)
plot(modelname)
rect.hclust(modelname, k=3)
europe
europe <-read.csv("europe.csv")
euroclust<-hclust(dist(europe[-1]))
plot(euroclust, labels=europe$Country)
rect.hclust(euroclust, 2)
europe <-read.csv("europe.csv")
euroclust<-hclust(dist(europe[-1]))
plot(euroclust, labels=europe$Country)
rect.hclust(euroclust, y)
europe <-read.csv("europe.csv")
euroclust<-hclust(dist(europe[-1]))
plot(euroclust, labels=europe$Country)
rect.hclust(euroclust, 7)
europe <-read.csv("europe.csv")
euroclust<-hclust(dist(europe[-2]))
plot(euroclust, labels=europe$Country)
rect.hclust(euroclust, 7)
europe <-read.csv("europe.csv")
euroclust<-hclust(dist(europe[-1]))
plot(euroclust, labels=europe$Country)
rect.hclust(euroclust, 7)
